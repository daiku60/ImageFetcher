//
//  ImagesListPresenter.swift
//  iBooChallenge
//
//  Created by Jordi Serra i Font on 19/2/17.
//  Copyright (c) 2017 kudai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ImagesListPresenterInput {
    func presentSearch(response: ImagesList.Search.Response)
}

protocol ImagesListPresenterOutput: class {
    func display(_ presentable: ImagesList.Search.Presentable)
}

protocol ImagesListParser {
    func parseIntoViewModel(_ json: [String: Any]) -> ImagesList.Search.Presentable.ViewModel
}

class ImagesListPresenter: ImagesListPresenterInput {
    weak var output: ImagesListPresenterOutput!
    
    // MARK: - Presentation logic
    
    func presentSearch(response: ImagesList.Search.Response) {
        
        switch response.taskResult {
        case .success(let json):
            //Fortmat the response into viewModel
            guard let viewModel = ImagesList.Search.Presentable.ViewModel(fromJSON: json) else {
                let error = ImagesList.Search.Presentable.ErrorViewModel(
                    errorTitle: "Error",
                    errorMessage: "error parsing response"
                )
                output.display(.error(error))
                return
            }
            output.display(.success(viewModel))
            
        case .failure(let error):
            // Format the error
            let errorVM = ImagesList.Search.Presentable.ErrorViewModel(errorTitle: "Error", errorMessage: error.localizedDescription)
            output.display(.error(errorVM))
        }
        
    }
}

extension ImagesList.Search.Presentable.ViewModel {
    init?(fromJSON json: [String : Any]) {
        guard let images = json["images"] as? [[String : Any]] else {
            return nil
        }
        
        self.images = images.flatMap { (imageDict) -> ImagesList.Search.Presentable.ViewModel.Image? in
            guard let identity = imageDict["id"] as? String,
                  let displaySizes = imageDict["display_sizes"] as? [String:Any],
                  let uri = displaySizes["uri"] as? String,
                  let title = imageDict["title"] as? String else {
                    return nil
            }
            
            return ImagesList.Search.Presentable.ViewModel.Image(identity: identity, imageURL: uri, title: title, isFavourite: false)
        }
    }
}
